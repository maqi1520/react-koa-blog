{
	"info": {
		"_postman_id": "f17eeed6-0468-4ff2-9636-8a105f98b7c6",
		"name": "node-koa-typescript",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Create user id variable\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"userId\", jsonData.id);",
							"});",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User\",\r\n\t\"email\": \"user@citest.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user with wrong email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Email is not valid\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"email must be an email\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User\",\r\n\t\"email\": \"user@citest\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user with missing name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Name is missing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name must be longer than or equal to 10 characters\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"email\": \"user@citest.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User Modified\",\r\n\t\"email\": \"user@citest.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a user with missing email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Email is missing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User Modified\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a nonexistent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"User trying to be updated does not exist\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The user you are trying to update doesn't exist in the db\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User Modified\",\r\n\t\"email\": \"user@citest.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/fakeId",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"fakeId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d18402-eb02-4ec5-a3b6-486af7a84f88",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User is created and can be fetched successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(\"user@citest.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get nonexistent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d18402-eb02-4ec5-a3b6-486af7a84f88",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User is not in the DB\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The user you are trying to retrieve doesn't exist in the db\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"url": {
					"raw": "{{url}}/users/fakeId",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"fakeId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f43684e7-b04e-4b96-aa0d-2b8048dbe839",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user forbidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13411841-ded9-4732-a497-8304b56ef036",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"User can only be deleted by himself\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"A user can only be deleted by himself\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{secondaryJwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "326f52fa-5ee4-4d89-b353-23163fe20fde",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"url": {
					"raw": "{{url}}/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}